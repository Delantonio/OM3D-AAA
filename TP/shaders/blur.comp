#version 450

#include "utils.glsl"

// compute shader of a gaussian blur

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D in_color;
layout(rgba8, binding = 1) uniform writeonly image2D out_color;

uniform uint x_blur = 0;

void main() {
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    
    // get gaussian kernel
    
    const int kernel_size = 5;
    const float kernel[kernel_size] = float[](0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);
    
    float sum = 0.0;
    vec3 hdr = vec3(0.0);
    
    if (x_blur != 0)
    {
        for (int i = 0; i < kernel_size; i++)
        {
            const int offset = i - kernel_size / 2;
            const ivec2 coord2 = ivec2(coord.x + offset, coord.y);
            
            const vec3 color = sRGB_to_linear(texelFetch(in_color, coord2, 0).rgb);
            hdr += color * kernel[i];
            sum += kernel[i];
        }
    }
    else
    {
        for (int i = 0; i < kernel_size; i++)
        {
            const int offset = i - kernel_size / 2;
            const ivec2 coord2 = ivec2(coord.x, coord.y + offset);
            
            const vec3 color = sRGB_to_linear(texelFetch(in_color, coord2, 0).rgb);
            hdr += color * kernel[i];
            sum += kernel[i];
        }
    }
    
    hdr /= sum;

    imageStore(out_color, coord, vec4(linear_to_sRGB(hdr), 1.0));
}

