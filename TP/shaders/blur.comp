#version 450

#include "utils.glsl"

// compute shader of a gaussian blur

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D in_color;
layout(rgba8, binding = 1) uniform writeonly image2D out_color;

uniform uint x_blur = 0;

// const float gauss[] = {
//     1.02798843e-04, 1.31755659e-03, 6.08748501e-03, 1.01389764e-02,
//     6.08748501e-03, 1.31755659e-03, 1.02798843e-04, 1.31755659e-03,
//     1.68869153e-02, 7.80223366e-02, 1.29949664e-01, 7.80223366e-02,
//     1.68869153e-02, 1.31755659e-03, 6.08748501e-03, 7.80223366e-02,
//     3.60485318e-01, 6.00404295e-01, 3.60485318e-01, 7.80223366e-02,
//     6.08748501e-03, 1.01389764e-02, 1.29949664e-01, 6.00404295e-01,
//     1.00000000e+00, 6.00404295e-01, 1.29949664e-01, 1.01389764e-02,
//     6.08748501e-03, 7.80223366e-02, 3.60485318e-01, 6.00404295e-01,
//     3.60485318e-01, 7.80223366e-02, 6.08748501e-03, 1.31755659e-03,
//     1.68869153e-02, 7.80223366e-02, 1.29949664e-01, 7.80223366e-02,
//     1.68869153e-02, 1.31755659e-03, 1.02798843e-04, 1.31755659e-03,
//     6.08748501e-03, 1.01389764e-02, 6.08748501e-03, 1.31755659e-03,
//     1.02798843e-04
// };

// const float gauss20[] = {
//     0.02054,
//     0.02494,
//     0.02966,
//     0.03457,
//     0.03947,
//     0.04416,
//     0.04841,
//     0.05199,
//     0.05471,
//     0.05641,
//     0.05699,
//     0.05641,
//     0.05471,
//     0.05199,
//     0.04841,
//     0.04416,
//     0.03947,
//     0.03457,
//     0.02966,
//     0.02494
// };

const float gauss11[] = {
    0.02054, 0.02494, 0.02966, 0.03457, 0.03947, 0.044, 0.048, 0.05199, 0.05471, 0.05641, 0.05699, 0.05641, 0.05471, 0.05199, 0.04841,
    0.04416, 0.03947, 0.03457, 0.02966, 0.02494,
};

void main() {
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    
    // get gaussian kernel
    // const int kernel_size = 11;
    const int kernel_size = 5;
    const float kernel[kernel_size] = {
        0.02054, 0.02494, 0.02966, 0.03457, 0.03947
    };
    
    float sum = 0.0;
    vec3 hdr = vec3(0.0);
    
    if (x_blur != 0)
    {
        for (int i = 0; i < kernel_size; i++)
        {
            const int offset = i - kernel_size / 2;
            const ivec2 coord2 = ivec2(coord.x + offset, coord.y);
            
            const vec3 color = sRGB_to_linear(texelFetch(in_color, coord2, 0).rgb);
            hdr += color * kernel[i];
            sum += kernel[i];
            // hdr += color * gauss11[i];
            // sum += gauss11[i];
        }
    }
    else
    {
        for (int i = 0; i < kernel_size; i++)
        {
            const int offset = i - kernel_size / 2;
            const ivec2 coord2 = ivec2(coord.x, coord.y + offset);
            
            const vec3 color = sRGB_to_linear(texelFetch(in_color, coord2, 0).rgb);
            hdr += color * kernel[i];
            sum += kernel[i];
            // hdr += color * gauss11[i];
            // sum += gauss11[i];
        }
    }
    
    hdr /= sum;
    hdr *= 0.7;

    imageStore(out_color, coord, vec4(linear_to_sRGB(hdr), 1.0));
}

